/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: DataPacket.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class DataPacket extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        intDoubleMap?: Map<number, number>;
        intIntMap?: Map<number, number>;
        ints?: number[];
        longs?: number[];
        doubles?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("intDoubleMap" in data && data.intDoubleMap != undefined) {
                this.intDoubleMap = data.intDoubleMap;
            }
            if ("intIntMap" in data && data.intIntMap != undefined) {
                this.intIntMap = data.intIntMap;
            }
            if ("ints" in data && data.ints != undefined) {
                this.ints = data.ints;
            }
            if ("longs" in data && data.longs != undefined) {
                this.longs = data.longs;
            }
            if ("doubles" in data && data.doubles != undefined) {
                this.doubles = data.doubles;
            }
        }
        if (!this.intDoubleMap)
            this.intDoubleMap = new Map();
        if (!this.intIntMap)
            this.intIntMap = new Map();
    }
    get intDoubleMap() {
        return pb_1.Message.getField(this, 1) as any as Map<number, number>;
    }
    set intDoubleMap(value: Map<number, number>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    get intIntMap() {
        return pb_1.Message.getField(this, 2) as any as Map<number, number>;
    }
    set intIntMap(value: Map<number, number>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    get ints() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set ints(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get longs() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
    }
    set longs(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get doubles() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set doubles(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        intDoubleMap?: {
            [key: number]: number;
        };
        intIntMap?: {
            [key: number]: number;
        };
        ints?: number[];
        longs?: number[];
        doubles?: number[];
    }): DataPacket {
        const message = new DataPacket({});
        if (typeof data.intDoubleMap == "object") {
            message.intDoubleMap = new Map(Object.entries(data.intDoubleMap).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.intIntMap == "object") {
            message.intIntMap = new Map(Object.entries(data.intIntMap).map(([key, value]) => [Number(key), value]));
        }
        if (data.ints != null) {
            message.ints = data.ints;
        }
        if (data.longs != null) {
            message.longs = data.longs;
        }
        if (data.doubles != null) {
            message.doubles = data.doubles;
        }
        return message;
    }
    toObject() {
        const data: {
            intDoubleMap?: {
                [key: number]: number;
            };
            intIntMap?: {
                [key: number]: number;
            };
            ints?: number[];
            longs?: number[];
            doubles?: number[];
        } = {};
        if (this.intDoubleMap != null) {
            data.intDoubleMap = (Object.fromEntries)(this.intDoubleMap);
        }
        if (this.intIntMap != null) {
            data.intIntMap = (Object.fromEntries)(this.intIntMap);
        }
        if (this.ints != null) {
            data.ints = this.ints;
        }
        if (this.longs != null) {
            data.longs = this.longs;
        }
        if (this.doubles != null) {
            data.doubles = this.doubles;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.intDoubleMap) {
            writer.writeMessage(1, this.intDoubleMap, () => {
                writer.writeInt32(1, key);
                writer.writeDouble(2, value);
            });
        }
        for (const [key, value] of this.intIntMap) {
            writer.writeMessage(2, this.intIntMap, () => {
                writer.writeInt32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.ints.length)
            writer.writePackedInt32(3, this.ints);
        if (this.longs.length)
            writer.writePackedInt64(4, this.longs);
        if (this.doubles.length)
            writer.writePackedDouble(5, this.doubles);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataPacket {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataPacket();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.intDoubleMap as any, reader, reader.readInt32, reader.readDouble));
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.intIntMap as any, reader, reader.readInt32, reader.readInt32));
                    break;
                case 3:
                    message.ints = reader.readPackedInt32();
                    break;
                case 4:
                    message.longs = reader.readPackedInt64();
                    break;
                case 5:
                    message.doubles = reader.readPackedDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataPacket {
        return DataPacket.deserialize(bytes);
    }
}
