/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: DataPacket.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

export class DataPacket extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        intDoubleMap?: Map<number, number>;
        intIntMap?: Map<number, number>;
        ints?: number[];
        longs?: number[];
        doubles?: number[];
        stringStringMap?: Map<string, string>;
        stringDoubleMap?: Map<string, number>;
        stringIntMap?: Map<string, number>;
        stringLongMap?: Map<string, number>;
        strings?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("intDoubleMap" in data && data.intDoubleMap != undefined) {
                this.intDoubleMap = data.intDoubleMap;
            }
            if ("intIntMap" in data && data.intIntMap != undefined) {
                this.intIntMap = data.intIntMap;
            }
            if ("ints" in data && data.ints != undefined) {
                this.ints = data.ints;
            }
            if ("longs" in data && data.longs != undefined) {
                this.longs = data.longs;
            }
            if ("doubles" in data && data.doubles != undefined) {
                this.doubles = data.doubles;
            }
            if ("stringStringMap" in data && data.stringStringMap != undefined) {
                this.stringStringMap = data.stringStringMap;
            }
            if ("stringDoubleMap" in data && data.stringDoubleMap != undefined) {
                this.stringDoubleMap = data.stringDoubleMap;
            }
            if ("stringIntMap" in data && data.stringIntMap != undefined) {
                this.stringIntMap = data.stringIntMap;
            }
            if ("stringLongMap" in data && data.stringLongMap != undefined) {
                this.stringLongMap = data.stringLongMap;
            }
            if ("strings" in data && data.strings != undefined) {
                this.strings = data.strings;
            }
        }
        if (!this.intDoubleMap)
            this.intDoubleMap = new Map();
        if (!this.intIntMap)
            this.intIntMap = new Map();
        if (!this.stringStringMap)
            this.stringStringMap = new Map();
        if (!this.stringDoubleMap)
            this.stringDoubleMap = new Map();
        if (!this.stringIntMap)
            this.stringIntMap = new Map();
        if (!this.stringLongMap)
            this.stringLongMap = new Map();
    }
    get intDoubleMap() {
        return pb_1.Message.getField(this, 1) as any as Map<number, number>;
    }
    set intDoubleMap(value: Map<number, number>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    get intIntMap() {
        return pb_1.Message.getField(this, 2) as any as Map<number, number>;
    }
    set intIntMap(value: Map<number, number>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    get ints() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set ints(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get longs() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
    }
    set longs(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get doubles() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set doubles(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get stringStringMap() {
        return pb_1.Message.getField(this, 6) as any as Map<string, string>;
    }
    set stringStringMap(value: Map<string, string>) {
        pb_1.Message.setField(this, 6, value as any);
    }
    get stringDoubleMap() {
        return pb_1.Message.getField(this, 7) as any as Map<string, number>;
    }
    set stringDoubleMap(value: Map<string, number>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    get stringIntMap() {
        return pb_1.Message.getField(this, 8) as any as Map<string, number>;
    }
    set stringIntMap(value: Map<string, number>) {
        pb_1.Message.setField(this, 8, value as any);
    }
    get stringLongMap() {
        return pb_1.Message.getField(this, 9) as any as Map<string, number>;
    }
    set stringLongMap(value: Map<string, number>) {
        pb_1.Message.setField(this, 9, value as any);
    }

    get strings() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
    }

    set strings(value: string[]) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        intDoubleMap?: {
            [key: number]: number;
        };
        intIntMap?: {
            [key: number]: number;
        };
        ints?: number[];
        longs?: number[];
        doubles?: number[];
        stringStringMap?: {
            [key: string]: string;
        };
        stringDoubleMap?: {
            [key: string]: number;
        };
        stringIntMap?: {
            [key: string]: number;
        };
        stringLongMap?: {
            [key: string]: number;
        };
        strings?: string[];
    }): DataPacket {
        const message = new DataPacket({});
        if (typeof data.intDoubleMap == "object") {
            message.intDoubleMap = new Map(Object.entries(data.intDoubleMap).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.intIntMap == "object") {
            message.intIntMap = new Map(Object.entries(data.intIntMap).map(([key, value]) => [Number(key), value]));
        }
        if (data.ints != null) {
            message.ints = data.ints;
        }
        if (data.longs != null) {
            message.longs = data.longs;
        }
        if (data.doubles != null) {
            message.doubles = data.doubles;
        }
        if (typeof data.stringStringMap == "object") {
            message.stringStringMap = new Map(Object.entries(data.stringStringMap));
        }
        if (typeof data.stringDoubleMap == "object") {
            message.stringDoubleMap = new Map(Object.entries(data.stringDoubleMap));
        }
        if (typeof data.stringIntMap == "object") {
            message.stringIntMap = new Map(Object.entries(data.stringIntMap));
        }
        if (typeof data.stringLongMap == "object") {
            message.stringLongMap = new Map(Object.entries(data.stringLongMap));
        }
        if (data.strings != null) {
            message.strings = data.strings;
        }
        return message;
    }

    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataPacket {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataPacket();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.intDoubleMap as any, reader, reader.readInt32, reader.readDouble));
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.intIntMap as any, reader, reader.readInt32, reader.readInt32));
                    break;
                case 3:
                    message.ints = reader.readPackedInt32();
                    break;
                case 4:
                    message.longs = reader.readPackedInt64();
                    break;
                case 5:
                    message.doubles = reader.readPackedDouble();
                    break;
                case 6:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stringStringMap as any, reader, reader.readString, reader.readString));
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stringDoubleMap as any, reader, reader.readString, reader.readDouble));
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stringIntMap as any, reader, reader.readString, reader.readInt32));
                    break;
                case 9:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stringLongMap as any, reader, reader.readString, reader.readInt64));
                    break;
                case 10:
                    pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }

    toObject() {
        const data: {
            intDoubleMap?: {
                [key: number]: number;
            };
            intIntMap?: {
                [key: number]: number;
            };
            ints?: number[];
            longs?: number[];
            doubles?: number[];
            stringStringMap?: {
                [key: string]: string;
            };
            stringDoubleMap?: {
                [key: string]: number;
            };
            stringIntMap?: {
                [key: string]: number;
            };
            stringLongMap?: {
                [key: string]: number;
            };
            strings?: string[];
        } = {};
        if (this.intDoubleMap != null) {
            data.intDoubleMap = (Object.fromEntries)(this.intDoubleMap);
        }
        if (this.intIntMap != null) {
            data.intIntMap = (Object.fromEntries)(this.intIntMap);
        }
        if (this.ints != null) {
            data.ints = this.ints;
        }
        if (this.longs != null) {
            data.longs = this.longs;
        }
        if (this.doubles != null) {
            data.doubles = this.doubles;
        }
        if (this.stringStringMap != null) {
            data.stringStringMap = (Object.fromEntries)(this.stringStringMap);
        }
        if (this.stringDoubleMap != null) {
            data.stringDoubleMap = (Object.fromEntries)(this.stringDoubleMap);
        }
        if (this.stringIntMap != null) {
            data.stringIntMap = (Object.fromEntries)(this.stringIntMap);
        }
        if (this.stringLongMap != null) {
            data.stringLongMap = (Object.fromEntries)(this.stringLongMap);
        }
        if (this.strings != null) {
            data.strings = this.strings;
        }
        return data;
    }

    serialize(): Uint8Array;

    serialize(w: pb_1.BinaryWriter): void;

    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.intDoubleMap) {
            writer.writeMessage(1, this.intDoubleMap, () => {
                writer.writeInt32(1, key);
                writer.writeDouble(2, value);
            });
        }
        for (const [key, value] of this.intIntMap) {
            writer.writeMessage(2, this.intIntMap, () => {
                writer.writeInt32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.ints.length)
            writer.writePackedInt32(3, this.ints);
        if (this.longs.length)
            writer.writePackedInt64(4, this.longs);
        if (this.doubles.length)
            writer.writePackedDouble(5, this.doubles);
        for (const [key, value] of this.stringStringMap) {
            writer.writeMessage(6, this.stringStringMap, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        for (const [key, value] of this.stringDoubleMap) {
            writer.writeMessage(7, this.stringDoubleMap, () => {
                writer.writeString(1, key);
                writer.writeDouble(2, value);
            });
        }
        for (const [key, value] of this.stringIntMap) {
            writer.writeMessage(8, this.stringIntMap, () => {
                writer.writeString(1, key);
                writer.writeInt32(2, value);
            });
        }
        for (const [key, value] of this.stringLongMap) {
            writer.writeMessage(9, this.stringLongMap, () => {
                writer.writeString(1, key);
                writer.writeInt64(2, value);
            });
        }
        if (this.strings.length)
            writer.writeRepeatedString(10, this.strings);
        if (!w)
            return writer.getResultBuffer();
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataPacket {
        return DataPacket.deserialize(bytes);
    }
}
