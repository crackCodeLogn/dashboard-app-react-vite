/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.2
 * source: Bank.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";

export enum BankType {
    GOVT = 0,
    PRIVATE = 1
}
export enum CurrencyCode {
    CAD = 0,
    INR = 1,
    USD = 2
}
export enum BankAccountType {
    CHQ = 0,
    SAV = 1,
    TFSA = 2,
    NR = 3,
    HISA = 4,
    STD = 5,
    CC = 6,
    FHSA = 7,
    RRSP = 8,
    MKT = 9,
    GIC = 10,
    CASH_R = 11,
    GOLD_R = 12
}
export enum FilterBy {
    ALL = 0,
    NAME = 1,
    IFSC = 2,
    CCY = 3
}
export class Bank extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        bankType?: BankType;
        IFSC?: string;
        contactNumber?: string;
        isActive?: boolean;
        countryCode?: string;
      externalId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("bankType" in data && data.bankType != undefined) {
                this.bankType = data.bankType;
            }
            if ("IFSC" in data && data.IFSC != undefined) {
                this.IFSC = data.IFSC;
            }
            if ("contactNumber" in data && data.contactNumber != undefined) {
                this.contactNumber = data.contactNumber;
            }
            if ("isActive" in data && data.isActive != undefined) {
                this.isActive = data.isActive;
            }
            if ("countryCode" in data && data.countryCode != undefined) {
                this.countryCode = data.countryCode;
            }
          if ("externalId" in data && data.externalId != undefined) {
            this.externalId = data.externalId;
          }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get bankType() {
        return pb_1.Message.getFieldWithDefault(this, 2, BankType.GOVT) as BankType;
    }
    set bankType(value: BankType) {
        pb_1.Message.setField(this, 2, value);
    }
    get IFSC() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set IFSC(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get contactNumber() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set contactNumber(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get isActive() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set isActive(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get countryCode() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set countryCode(value: string) {
        pb_1.Message.setField(this, 6, value);
    }

  get externalId() {
    return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
  }

  set externalId(value: string) {
    pb_1.Message.setField(this, 7, value);
  }
    static fromObject(data: {
        name?: string;
        bankType?: BankType;
        IFSC?: string;
        contactNumber?: string;
        isActive?: boolean;
        countryCode?: string;
      externalId?: string;
    }): Bank {
        const message = new Bank({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.bankType != null) {
            message.bankType = data.bankType;
        }
        if (data.IFSC != null) {
            message.IFSC = data.IFSC;
        }
        if (data.contactNumber != null) {
            message.contactNumber = data.contactNumber;
        }
        if (data.isActive != null) {
            message.isActive = data.isActive;
        }
        if (data.countryCode != null) {
            message.countryCode = data.countryCode;
        }
      if (data.externalId != null) {
        message.externalId = data.externalId;
      }
        return message;
    }

    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bank {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bank();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.bankType = reader.readEnum();
                    break;
                case 3:
                    message.IFSC = reader.readString();
                    break;
                case 4:
                    message.contactNumber = reader.readString();
                    break;
                case 5:
                    message.isActive = reader.readBool();
                    break;
                case 6:
                    message.countryCode = reader.readString();
                  break;
              case 7:
                message.externalId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;

    toObject() {
        const data: {
            name?: string;
            bankType?: BankType;
            IFSC?: string;
            contactNumber?: string;
            isActive?: boolean;
            countryCode?: string;
          externalId?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.bankType != null) {
            data.bankType = this.bankType;
        }
        if (this.IFSC != null) {
            data.IFSC = this.IFSC;
        }
        if (this.contactNumber != null) {
            data.contactNumber = this.contactNumber;
        }
        if (this.isActive != null) {
            data.isActive = this.isActive;
        }
        if (this.countryCode != null) {
            data.countryCode = this.countryCode;
        }
      if (this.externalId != null) {
        data.externalId = this.externalId;
      }
        return data;
    }

    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.bankType != BankType.GOVT)
            writer.writeEnum(2, this.bankType);
        if (this.IFSC.length)
            writer.writeString(3, this.IFSC);
        if (this.contactNumber.length)
            writer.writeString(4, this.contactNumber);
        if (this.isActive != false)
            writer.writeBool(5, this.isActive);
        if (this.countryCode.length)
            writer.writeString(6, this.countryCode);
      if (this.externalId.length)
        writer.writeString(7, this.externalId);
        if (!w)
            return writer.getResultBuffer();
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Bank {
        return Bank.deserialize(bytes);
    }
}
export class BankList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        banks?: Bank[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("banks" in data && data.banks != undefined) {
                this.banks = data.banks;
            }
        }
    }
    get banks() {
        return pb_1.Message.getRepeatedWrapperField(this, Bank, 1) as Bank[];
    }
    set banks(value: Bank[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        banks?: ReturnType<typeof Bank.prototype.toObject>[];
    }): BankList {
        const message = new BankList({});
        if (data.banks != null) {
            message.banks = data.banks.map(item => Bank.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            banks?: ReturnType<typeof Bank.prototype.toObject>[];
        } = {};
        if (this.banks != null) {
            data.banks = this.banks.map((item: Bank) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.banks.length)
            writer.writeRepeatedMessage(1, this.banks, (item: Bank) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BankList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BankList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.banks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Bank.deserialize(reader), Bank));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BankList {
        return BankList.deserialize(bytes);
    }
}
export class BankAccount extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bank?: Bank;
        id?: string;
        number?: string;
        name?: string;
        transitNumber?: string;
        institutionNumber?: string;
        balance?: number;
        metaData?: Map<string, string>;
        bankAccountTypes?: BankAccountType[];
        overdraftBalance?: number;
        interestRate?: number;
        isActive?: boolean;
        createdAt?: dependency_1.google.protobuf.Timestamp;
        lastUpdatedAt?: dependency_1.google.protobuf.Timestamp;
        ccy?: CurrencyCode;
        note?: string;
      externalId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bank" in data && data.bank != undefined) {
                this.bank = data.bank;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("number" in data && data.number != undefined) {
                this.number = data.number;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("transitNumber" in data && data.transitNumber != undefined) {
                this.transitNumber = data.transitNumber;
            }
            if ("institutionNumber" in data && data.institutionNumber != undefined) {
                this.institutionNumber = data.institutionNumber;
            }
            if ("balance" in data && data.balance != undefined) {
                this.balance = data.balance;
            }
            if ("metaData" in data && data.metaData != undefined) {
                this.metaData = data.metaData;
            }
            if ("bankAccountTypes" in data && data.bankAccountTypes != undefined) {
                this.bankAccountTypes = data.bankAccountTypes;
            }
            if ("overdraftBalance" in data && data.overdraftBalance != undefined) {
                this.overdraftBalance = data.overdraftBalance;
            }
            if ("interestRate" in data && data.interestRate != undefined) {
                this.interestRate = data.interestRate;
            }
            if ("isActive" in data && data.isActive != undefined) {
                this.isActive = data.isActive;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("lastUpdatedAt" in data && data.lastUpdatedAt != undefined) {
                this.lastUpdatedAt = data.lastUpdatedAt;
            }
            if ("ccy" in data && data.ccy != undefined) {
                this.ccy = data.ccy;
            }
            if ("note" in data && data.note != undefined) {
                this.note = data.note;
            }
          if ("externalId" in data && data.externalId != undefined) {
            this.externalId = data.externalId;
          }
        }
        if (!this.metaData)
            this.metaData = new Map();
    }
    get bank() {
        return pb_1.Message.getWrapperField(this, Bank, 1) as Bank;
    }
    set bank(value: Bank) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_bank() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get number() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set number(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get transitNumber() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set transitNumber(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get institutionNumber() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set institutionNumber(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get balance() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set balance(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get metaData() {
        return pb_1.Message.getField(this, 8) as any as Map<string, string>;
    }
    set metaData(value: Map<string, string>) {
        pb_1.Message.setField(this, 8, value as any);
    }
    get bankAccountTypes() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as BankAccountType[];
    }
    set bankAccountTypes(value: BankAccountType[]) {
        pb_1.Message.setField(this, 9, value);
    }
    get overdraftBalance() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set overdraftBalance(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get interestRate() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set interestRate(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get isActive() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set isActive(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 13) as dependency_1.google.protobuf.Timestamp;
    }
    set createdAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get lastUpdatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 14) as dependency_1.google.protobuf.Timestamp;
    }
    set lastUpdatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get has_lastUpdatedAt() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get ccy() {
        return pb_1.Message.getFieldWithDefault(this, 15, CurrencyCode.CAD) as CurrencyCode;
    }
    set ccy(value: CurrencyCode) {
        pb_1.Message.setField(this, 15, value);
    }
    get note() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set note(value: string) {
        pb_1.Message.setField(this, 16, value);
    }

  get externalId() {
    return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
  }

  set externalId(value: string) {
    pb_1.Message.setField(this, 17, value);
  }
    static fromObject(data: {
        bank?: ReturnType<typeof Bank.prototype.toObject>;
        id?: string;
        number?: string;
        name?: string;
        transitNumber?: string;
        institutionNumber?: string;
        balance?: number;
        metaData?: {
            [key: string]: string;
        };
        bankAccountTypes?: BankAccountType[];
        overdraftBalance?: number;
        interestRate?: number;
        isActive?: boolean;
        createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        lastUpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        ccy?: CurrencyCode;
        note?: string;
      externalId?: string;
    }): BankAccount {
        const message = new BankAccount({});
        if (data.bank != null) {
            message.bank = Bank.fromObject(data.bank);
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.number != null) {
            message.number = data.number;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.transitNumber != null) {
            message.transitNumber = data.transitNumber;
        }
        if (data.institutionNumber != null) {
            message.institutionNumber = data.institutionNumber;
        }
        if (data.balance != null) {
            message.balance = data.balance;
        }
        if (typeof data.metaData == "object") {
            message.metaData = new Map(Object.entries(data.metaData));
        }
        if (data.bankAccountTypes != null) {
            message.bankAccountTypes = data.bankAccountTypes;
        }
        if (data.overdraftBalance != null) {
            message.overdraftBalance = data.overdraftBalance;
        }
        if (data.interestRate != null) {
            message.interestRate = data.interestRate;
        }
        if (data.isActive != null) {
            message.isActive = data.isActive;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
        }
        if (data.lastUpdatedAt != null) {
            message.lastUpdatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.lastUpdatedAt);
        }
        if (data.ccy != null) {
            message.ccy = data.ccy;
        }
        if (data.note != null) {
            message.note = data.note;
        }
      if (data.externalId != null) {
        message.externalId = data.externalId;
      }
        return message;
    }

    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BankAccount {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BankAccount();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.bank, () => message.bank = Bank.deserialize(reader));
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                case 3:
                    message.number = reader.readString();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.transitNumber = reader.readString();
                    break;
                case 6:
                    message.institutionNumber = reader.readString();
                    break;
                case 7:
                    message.balance = reader.readDouble();
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                    break;
                case 9:
                    message.bankAccountTypes = reader.readPackedEnum();
                    break;
                case 10:
                    message.overdraftBalance = reader.readDouble();
                    break;
                case 11:
                    message.interestRate = reader.readDouble();
                    break;
                case 12:
                    message.isActive = reader.readBool();
                    break;
                case 13:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.lastUpdatedAt, () => message.lastUpdatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 15:
                    message.ccy = reader.readEnum();
                    break;
                case 16:
                    message.note = reader.readString();
                  break;
              case 17:
                message.externalId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;

    toObject() {
        const data: {
            bank?: ReturnType<typeof Bank.prototype.toObject>;
            id?: string;
            number?: string;
            name?: string;
            transitNumber?: string;
            institutionNumber?: string;
            balance?: number;
            metaData?: {
                [key: string]: string;
            };
            bankAccountTypes?: BankAccountType[];
            overdraftBalance?: number;
            interestRate?: number;
            isActive?: boolean;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lastUpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            ccy?: CurrencyCode;
            note?: string;
          externalId?: string;
        } = {};
        if (this.bank != null) {
            data.bank = this.bank.toObject();
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.number != null) {
            data.number = this.number;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.transitNumber != null) {
            data.transitNumber = this.transitNumber;
        }
        if (this.institutionNumber != null) {
            data.institutionNumber = this.institutionNumber;
        }
        if (this.balance != null) {
            data.balance = this.balance;
        }
        if (this.metaData != null) {
            data.metaData = (Object.fromEntries)(this.metaData);
        }
        if (this.bankAccountTypes != null) {
            data.bankAccountTypes = this.bankAccountTypes;
        }
        if (this.overdraftBalance != null) {
            data.overdraftBalance = this.overdraftBalance;
        }
        if (this.interestRate != null) {
            data.interestRate = this.interestRate;
        }
        if (this.isActive != null) {
            data.isActive = this.isActive;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.lastUpdatedAt != null) {
            data.lastUpdatedAt = this.lastUpdatedAt.toObject();
        }
        if (this.ccy != null) {
            data.ccy = this.ccy;
        }
        if (this.note != null) {
            data.note = this.note;
        }
      if (this.externalId != null) {
        data.externalId = this.externalId;
      }
        return data;
    }

    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_bank)
            writer.writeMessage(1, this.bank, () => this.bank.serialize(writer));
        if (this.id.length)
            writer.writeString(2, this.id);
        if (this.number.length)
            writer.writeString(3, this.number);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.transitNumber.length)
            writer.writeString(5, this.transitNumber);
        if (this.institutionNumber.length)
            writer.writeString(6, this.institutionNumber);
        if (this.balance != 0)
            writer.writeDouble(7, this.balance);
        for (const [key, value] of this.metaData) {
            writer.writeMessage(8, this.metaData, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (this.bankAccountTypes.length)
            writer.writePackedEnum(9, this.bankAccountTypes);
        if (this.overdraftBalance != 0)
            writer.writeDouble(10, this.overdraftBalance);
        if (this.interestRate != 0)
            writer.writeDouble(11, this.interestRate);
        if (this.isActive != false)
            writer.writeBool(12, this.isActive);
        if (this.has_createdAt)
            writer.writeMessage(13, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_lastUpdatedAt)
            writer.writeMessage(14, this.lastUpdatedAt, () => this.lastUpdatedAt.serialize(writer));
        if (this.ccy != CurrencyCode.CAD)
            writer.writeEnum(15, this.ccy);
        if (this.note.length)
            writer.writeString(16, this.note);
      if (this.externalId.length)
        writer.writeString(17, this.externalId);
        if (!w)
            return writer.getResultBuffer();
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BankAccount {
        return BankAccount.deserialize(bytes);
    }
}
export class BankAccounts extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        accounts?: BankAccount[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("accounts" in data && data.accounts != undefined) {
                this.accounts = data.accounts;
            }
        }
    }
    get accounts() {
        return pb_1.Message.getRepeatedWrapperField(this, BankAccount, 1) as BankAccount[];
    }
    set accounts(value: BankAccount[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        accounts?: ReturnType<typeof BankAccount.prototype.toObject>[];
    }): BankAccounts {
        const message = new BankAccounts({});
        if (data.accounts != null) {
            message.accounts = data.accounts.map(item => BankAccount.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            accounts?: ReturnType<typeof BankAccount.prototype.toObject>[];
        } = {};
        if (this.accounts != null) {
            data.accounts = this.accounts.map((item: BankAccount) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.accounts.length)
            writer.writeRepeatedMessage(1, this.accounts, (item: BankAccount) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BankAccounts {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BankAccounts();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.accounts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BankAccount.deserialize(reader), BankAccount));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BankAccounts {
        return BankAccounts.deserialize(bytes);
    }
}
