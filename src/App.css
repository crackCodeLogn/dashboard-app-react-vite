#root {
    /*max-width: 1280px;*/
    margin: 0 auto;
    /*padding: 2rem;*/
    text-align: center;
}

.logo {
    height: 6em;
    padding: 1.5em;
    will-change: filter;
    transition: filter 300ms;
}

.logo:hover {
    filter: drop-shadow(0 0 2em #646cffaa);
}

.logo.react:hover {
    filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

@media (prefers-reduced-motion: no-preference) {
    a:nth-of-type(2) .logo {
        animation: logo-spin infinite 20s linear;
    }
}

.card {
    padding: 2em;
}

.read-the-docs {
    color: #888;
}

h1 {
    padding-top: 1rem;
}

.row {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: .8rem;
}

.row-distance-5 {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: .5rem;
}

.linear {
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    align-items: center;
    gap: .8rem;
}

.record {
    width: 100%;
    display: flex;
    flex-direction: row;
    /*align-items: center;*/
    justify-content: space-between;
    gap: 1rem;
}

.record-space-around {
    /* 1. Enable Flexbox */
    display: flex;

    /* 2. Horizontal Spacing FIX: Use space-between to push items to edges,
          which creates a balanced proportional gap in the middle for 2 items. */
    justify-content: space-evenly;

    /* 3. VERTICAL CENTERING: Align items in the center vertically */
    align-items: center;

    /* 4. Allow wrapping to the next line if the screen is too narrow */
    flex-wrap: wrap;

    /* 5. Add vertical padding/margin for row separation */
    margin: 20px 0px;
    padding: 10px 0; /* Optional: small padding for container */
}

/* Target the direct children (the components) */
.record-space-around > * {
    /* 6. FIX: Use flex-basis to control width and flex-shrink: 0 to prevent shrinking */

    /* For 2 items: 48% is close to half, leaving 4% for the gap created by space-between */
    /* For 3 items: 32% allows them to fit (3 * 32% = 96%) with space-between gaps */
    flex-basis: 47%; /* Adjust this percentage based on your desired layout */

    /* 7. Crucial: Prevents the component from shrinking below the flex-basis value */
    flex-shrink: 0;

    /* 8. Optional: Allows component to grow slightly if space allows, but based on 48% basis */
    flex-grow: 0;

    /* 9. Ensure a minimum width for responsiveness on small screens */
    min-width: 300px; /* Ensure component content is readable */

    /* 10. Margin for consistent vertical spacing when items wrap */
    margin-bottom: 20px;

    /* Optional: Center content inside the component */
    text-align: center;
}

.record-space-around-3 {
    /* 1. Enable Flexbox */
    display: flex;

    /* 2. Horizontal Spacing FIX: Use space-between to push items to edges,
          which creates a balanced proportional gap in the middle for 2 items. */
    justify-content: space-between;

    /* 3. VERTICAL CENTERING: Align items in the center vertically */
    align-items: center;

    /* 4. Allow wrapping to the next line if the screen is too narrow */
    flex-wrap: wrap;

    /* 5. Add vertical padding/margin for row separation */
    margin: 20px 0;
    padding: 0 10px; /* Optional: small padding for container */
}

/* Target the direct children (the components) */
.record-space-around-3 > * {
    /* 6. FIX: Use flex-basis to control width and flex-shrink: 0 to prevent shrinking */

    /* For 2 items: 48% is close to half, leaving 4% for the gap created by space-between */
    /* For 3 items: 32% allows them to fit (3 * 32% = 96%) with space-between gaps */
    flex-basis: 32%; /* Adjust this percentage based on your desired layout */

    /* 7. Crucial: Prevents the component from shrinking below the flex-basis value */
    flex-shrink: 0;

    /* 8. Optional: Allows component to grow slightly if space allows, but based on 48% basis */
    flex-grow: 0;

    /* 9. Ensure a minimum width for responsiveness on small screens */
    min-width: 300px; /* Ensure component content is readable */

    /* 10. Margin for consistent vertical spacing when items wrap */
    margin-bottom: 20px;

    /* Optional: Center content inside the component */
    text-align: center;
}


.card-box {
    width: 350px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: .5rem;
}

textarea {
    text-align: center;
}

.centerLine {
    text-align: center;
}

.leftLine {
    text-align: start;
}

.width100 {
    width: 100%;
}

.width250 {
    width: 250px;
}

.vflex {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    row-gap: 20px;
    margin-top: 20px;
}

/* Hide the native clock icon in time input fields */
/*input[type="time"]::-webkit-calendar-picker-indicator {
    display: none;
    -webkit-appearance: none;
}*/

.error {
    color: red;
}

.centralize-2 {
    justify-items: center;
}

.market-breakdown-title {
    /* Center the text */
    text-align: center;

    /* Make it the most prominent heading */
    font-size: 2.5em;
    font-weight: 700;
    color: #17a2b8; /* Use your brand/accent color */

    /* Generous spacing above and below */
    margin-top: 50px;
    margin-bottom: 30px;

    /* Optional: Stronger visual separation */
    padding-bottom: 15px;
    border-bottom: 3px solid #17a2b8;

    /* Ensure it spans the full width of the container */
    width: 90%;
    max-width: 1200px; /* Limit max width for wide screens */
    margin-left: auto;
    margin-right: auto;
}

.account-section-heading {
    /* Center the text horizontally */
    text-align: center;

    /* Make it stand out */
    font-size: 2em;
    font-weight: 600;
    color: #333; /* Darker color for emphasis */

    /* Add space above and below the heading to separate sections */
    margin-top: 40px;
    margin-bottom: 20px;

    /* Optional: Add a subtle visual divider */
    padding-bottom: 10px;
    border-bottom: 2px solid #ccc;

    /* Ensure the heading spans the full width of its parent container */
    width: 100%;
}